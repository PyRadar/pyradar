
# Python projects:
alias limpiarpycs='find . -iname "*.pyc" -delete'

# Tesis
export GIT_SSL_NO_VERIFY='1'
alias tesis_start='
    cd ~/Dev/Tesis/Code/proj/code/
    source ~/Dev/Tesis/EnvTesis/bin/activate
    limpiarpics
    clear
'

# Para que SVN no muera por los acentos:
export LC_CTYPE=en_US.UTF-8

# General stuff:
alias ls="ls -G"
export EDITOR=vim
export GIT_EDITOR=vim

# Para que bash tenga mucha memoria:
export HISTCONTROL=erasedups
export HISTSIZE=5000
export HISTFILESIZE=5000
shopt -s histappend

# Git and Django completions:
source ~/.django_bash_completion
source ~/.git_completion.sh

function parse_git_dirty {
        status=`git status 2> /dev/null`
        dirty=`    echo -n "${status}" 2> /dev/null | grep -q "Changed but not updated" 2> /dev/null; echo "$?"`
        untracked=`echo -n "${status}" 2> /dev/null | grep -q "Untracked files" 2> /dev/null; echo "$?"`
        ahead=`    echo -n "${status}" 2> /dev/null | grep -q "Your branch is ahead of" 2> /dev/null; echo "$?"`
        newfile=`  echo -n "${status}" 2> /dev/null | grep -q "new file:" 2> /dev/null; echo "$?"`
        renamed=`  echo -n "${status}" 2> /dev/null | grep -q "renamed:" 2> /dev/null; echo "$?"`
	modified=`echo -n "${status}" 2> /dev/null | grep -q "modified:" 2> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep -q "deleted:" 2> /dev/null; echo "$?"`
        bits=''
        if [ "${dirty}" == "0" ]; then
                bits="${bits} asdf"
        fi
        if [ "${untracked}" == "0" ]; then
                bits="${bits} ?"
        fi
        if [ "${newfile}" == "0" ]; then
                bits="${bits} *"
        fi
        if [ "${ahead}" == "0" ]; then
                bits="${bits} +"
        fi
        if [ "${renamed}" == "0" ]; then
                bits="${bits} >"
        fi
        if [ "${modified}" == "0" ]; then
                bits="${bits} m"
        fi
        if [ "${deleted}" == "0" ]; then
                bits="${bits} d"
        fi
        echo "${bits}"
}

function parse_git_revision {
        ref1=$(__git_ps1 | sed -e "s/ (\(.*\))/(git: \1$(parse_git_dirty))/")

        if [ "x$ref1" != "x"  ]; then
                echo " ${ref1} "
        fi
}

Black=$(tput setaf 0)
BlackBG=$(tput setab 0)
DarkGrey=$(tput bold ; tput setaf 0)
LightGrey=$(tput setaf 7)
White=$(tput bold ; tput setaf 7)
RedBG=$(tput setab 1)
LightRed=$(tput bold ; tput setaf 1)
GreenBG=$(tput setab 2)
LightGreen=$(tput bold ; tput setaf 2)
Brown=$(tput setaf 3)
BrownBG=$(tput setab 3)
Yellow=$(tput bold ; tput setaf 3)
Blue=$(tput setaf 4)
BrightBlue=$(tput bold ; tput setaf 4)
Purple=$(tput setaf 5)
PurpleBG=$(tput setab 5)
Pink=$(tput bold ; tput setaf 5)
Cyan=$(tput setaf 6)
CyanBG=$(tput setab 6)
BrightCyan=$(tput bold ; tput setaf 6)
# sin color
sc=$(tput sgr0)

PS1='\[$LightGreen\][\u@\h]:\[$LightGrey\]\W\[$BrightCyan\]`parse_git_revision`\[$Yellow\]\$ \[$sc\]'
#PS1='\h:\W \u\$'
